{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 iResolution;\nuniform vec2 iMouse;\nuniform float iTime;\n\nvec4 fragColor;\n\nfloat dstepf;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nmat3 FLT_flutter_local_getRotZMat(float a)\n{\n    return mat3(vec3(cos(a), -sin(a), 0.0), vec3(sin(a), cos(a), 0.0), vec3(0.0, 0.0, 1.0));\n}\n\nfloat FLT_flutter_local_map(inout vec3 p)\n{\n    p.x += sin(p.z * 1.7999999523162841796875);\n    p.y += (cos(p.z * 0.20000000298023223876953125) * sin(p.x * 0.800000011920928955078125));\n    float param = ((p.z * 0.800000011920928955078125) + sin(p.x)) + cos(p.y);\n    p *= FLT_flutter_local_getRotZMat(param);\n    vec3 _94 = p;\n    vec2 _101 = mod(_94.xy, vec2(0.300000011920928955078125)) - vec2(0.1500000059604644775390625);\n    p.x = _101.x;\n    p.y = _101.y;\n    dstepf += 0.0030000000260770320892333984375;\n    return length(p.xy);\n}\n\nvoid FLT_main()\n{\n    dstepf = 0.0;\n    vec2 uv = (FLT_flutter_local_FlutterFragCoord() - (iResolution * 0.5)) / vec2(iResolution.y);\n    vec3 rd = normalize(vec3(uv, (1.0 - (dot(uv, uv) * 0.5)) * 0.5));\n    vec3 ro = vec3(0.0, 0.0, iTime * 1.2599999904632568359375);\n    vec3 col = vec3(0.0);\n    float cs = cos(iTime * 0.375);\n    float si = sin(iTime * 0.375);\n    vec3 _166 = rd;\n    vec2 _168 = mat2(vec2(cs, si), vec2(-si, cs)) * _166.xz;\n    rd.x = _168.x;\n    rd.z = _168.y;\n    float t = 0.0599999986588954925537109375;\n    float layers = 0.0;\n    float d = 0.0;\n    float thD = 0.0199999995529651641845703125;\n    for (float i = 0.0; i < 250.0; i += 1.0)\n    {\n        bool _191 = layers > 15.0;\n        bool _198;\n        if (!_191)\n        {\n            _198 = col.x > 1.0;\n        }\n        else\n        {\n            _198 = _191;\n        }\n        if (_198 || (t > 5.599999904632568359375))\n        {\n            break;\n        }\n        vec3 sp = ro + (rd * t);\n        vec3 param_1 = sp;\n        float _214 = FLT_flutter_local_map(param_1);\n        d = _214;\n        float aD = (thD - ((abs(d) * 15.0) / 16.0)) / thD;\n        if (aD > 0.0)\n        {\n            col += vec3((((aD * aD) * (3.0 - (2.0 * aD))) / (1.0 + ((t * t) * 0.25))) * 0.20000000298023223876953125);\n            layers += 1.0;\n        }\n        t += (max(d * 0.699999988079071044921875, thD * 1.5) * dstepf);\n    }\n    col = max(col, vec3(0.0));\n    col = mix(col, vec3(min(col.x * 1.5, 1.0), pow(col.x, 2.5), pow(col.x, 12.0)), vec3(dot(sin((rd.yzx * 8.0) + sin(rd.zxy * 8.0)), vec3(0.16660000383853912353515625)) + 0.4000000059604644775390625));\n    col = mix(col, vec3((col.x * col.x) * 0.85000002384185791015625, col.x, (col.x * col.x) * 0.300000011920928955078125), vec3(dot(sin((rd.yzx * 4.0) + sin(rd.zxy * 4.0)), vec3(0.16660000383853912353515625)) + 0.25));\n    fragColor = vec4(clamp(col, vec3(0.0), vec3(1.0)), 1.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "iResolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "iMouse",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 2,
      "name": "iTime",
      "rows": 1,
      "type": 10
    }
  ]
}